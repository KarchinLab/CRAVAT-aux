ms.gibbs
## Use mixture of normal to approximate data distribution
```{r Normal Components, echo=FALSE, message=FALSE,warning=FALSE}
normal_compo = function(dat, iter, n, plotdistri){
  library(gtools)
  l = length(dat)
#  d = as.data.frame(matrix(NA, nrow = iter, ncol = 12))
# colnames(d) = c("p1", "p2", "p3", "n1", "n2", "n3", "theta1", "theta2", "theta3", "sigma1sq", "sigma2sq" , "sigma3sq")
  v0 = 3
  mu = mean(dat)
  tau0sq= 0.5
  sigsq = var(dat)
  p0 = rdirichlet(1, rep(1, n))
  p = as.data.frame(matrix(NA, nrow = iter, ncol = n))
  for (i in 1:n){
    p[1, i] = p0[i]
  }
  N = as.data.frame(matrix(NA, nrow = iter, ncol = n))
  for (i in 1:(n - 1)){
    N[1, i] = floor(l/n)
  }
  N[1, n] = l - (n - 1) * floor(l/n)
  theta = as.data.frame(matrix(NA, nrow = iter, ncol = n))
  for (i in 1:n){
    theta[1, i] = rnorm(1, mu, sqrt(tau0sq))
  }
  sigmasq = as.data.frame(matrix(NA, nrow = iter, ncol = n))
  for (i in 1:n){
    sigmasq[1, i] = 1/(rgamma(1, shape = v0/2, rate = v0/2*sigsq))
  }
for (i in 2:iter){
  p_tilde = as.data.frame(matrix(NA, nrow = length(dat), ncol = n))
  s = rep(0 ,length(dat))
  for (j in 1:n) {
    s = s + p[i - 1, j] * dnorm(dat, theta[i - 1, j], sqrt(sigmasq[i - 1, j]))
  }
  for (j in 1:n){
    p_tilde[, j] = p[i - 1, j] * dnorm(dat, theta[i - 1, j], sqrt(sigmasq[i - 1, j]))/s
  }
  index = matrix(rep(NA, nrow(p_tilde)*n), ncol = n)  
  for (j in 1:nrow(p_tilde)){
    temp = rmultinom(1, 1, p_tilde[j, ])
    for (w in 1:n){
      index[j, w] = temp[w]
    }
  }
  ydat = list()
  for (j in 1:n){
    ydat[[j]] = dat[index[,j] == 1]
  }
  prob = c()
  for (j in 1:n){
    N[i, j] = length(ydat[[j]])
    prob = c(prob, length(ydat[[j]]) + 1)
  }
  p_hat = rdirichlet(1, prob)
  p[i, ] = p_hat
  for (j in 1:n){
    mutemp = (sum(ydat[[j]])/sigmasq[i - 1, j] + mu/tau0sq)/(N[i, j]/sigmasq[i - 1, j] + 1/tau0sq)
    tautemp = 1/(N[i, j]/sigmasq[i - 1, j] + 1/tau0sq)
    theta[i, j] = rnorm(1, mutemp, sqrt(tautemp))
  }
  for (j in 1:n){
    vtemp = N[i, j] + v0
    sigmatemp = 1/vtemp * (v0*sigsq + sum((ydat[[j]] - theta[i, j])^2))
    sigmasq[i, j] = 1/(rgamma(1, shape = vtemp/2, rate = vtemp/2*sigmatemp))
  }
}
z = matrix(c(rep(NA, iter*n)), ncol = n)
y = rep(NA, iter)
for (i in 1:iter){
  z_o = rmultinom(1, 1, p[i, ])
  j = which(z_o == 1)
  y[i] = rnorm(1, theta[i, j], sqrt(sigmasq[i, j]))
}
# hist(y, probability = T, breaks = 40, ylim = c(0, max(y, dat)), xlim = c(-6, 2), col = "lightsteelblue1", main = "Normal n = 3")
if (plotdistri == T){
plot(density(y), lwd = 2, col = "blue", ylim = c(0, max(max(density(dat)$y), max(density(y)$y))), xlim = c(0, 1), main = paste("Plot using parameters from each iteration with", n, "component(s)"))
lines(density(dat), col = "red", lwd = 2)
legend("topright", legend = c("Data", "Gibbs"), col = c("red", "blue"), lty = 1)
}
re = list(y, p, N, theta, sigmasq)
return(re)
}
```
```{r Normal Components usage, echo=FALSE, message=FALSE,warning=FALSE}
test_normal = normal_compo(dat = Inframe, iter = 10, n = 3, 1)
```
## Use Gibbs to sample from average parameter
```{r Gibbs Sampler, echo=FALSE, message=FALSE,warning=FALSE}
gibbs_sample = function(data, iter, n, size, plotdistri){
test = normal_compo(data, iter, n, 0)
p0 = rep(NA, ncol(test[[2]]))
N0 = rep(NA, ncol(test[[3]]))
theta0 = rep(NA, ncol(test[[4]]))
sigmasq0 = rep(NA, ncol(test[[5]]))
for (i in 1:ncol(test[[2]])){
  p0[i] = mean(test[[2]][floor(iter/2): iter,i])
  N0[i] = mean(test[[3]][floor(iter/2): iter,i])
  theta0[i] = mean(test[[4]][floor(iter/2): iter,i])
  sigmasq0[i] = mean(test[[5]][floor(iter/2): iter,i])
}
y = rep(NA, size)
for (i in 1:size){
  z_o = rmultinom(1, 1, p0)
  j = which(z_o == 1)
  y[i] = rnorm(1, theta0[j], sqrt(sigmasq0[j]))
}
if (plotdistri == T){
  plot(density(data), lwd = 2, ylim = c(0, max(max(density(data)$y), max(density(y)$y))), xlim = c(min(data, y) - 0.1, max(data, y) + 0.1), main = paste(n, "component(s):", substitute(data), sep = " "))
lines(density(y), col = "green", lwd = 2)
legend("topright", legend = c("Data", "Gibbs"), col = c("black", "green"), lty = 1)
}
return(list(y, p0, N0, theta0, sigmasq0, data, test))
}
data <- read.csv("scoredata_hg38.csv")
for (i in 1:ncol(data)){
  assign(as.character(colnames(data)[i]), data[,i][!is.na(data[,i])])
}
pval_tab = function(y, deci, p_val_deci){  #function to make p-value table
  tol = 10^(deci)
  tab = as.data.frame(rep(0, tol + 1))
  colnames(tab) = "p-value"
  y = y[y>=0 & y<=1]
  for (i in 1:(tol)){
    input = 1/tol * i - 1/tol
    rownames(tab)[i] = input
    tab[i, 1] = round((length(c(input, y)) - (rank(c(input, y), ties.method = "first")[1] - 1))/length(c(input, y)), p_val_deci)
  }
  rownames(tab)[tol+1] = 1
  return(tab)
}
ms.gibbs <- gibbs_sample(Missense,10000,3,10000, 1)
ms.table <- pval_tab(ms.gibbs[[1]], 2, 5)
write.csv(ms.table, 'missense_hg38.pval.csv')
ms.table <- pval_tab(ms.gibbs[[1]], 3, 5)
write.csv(ms.table, 'missense_hg38.pval.csv')
fs.gibbs <- gibbs_sample(FrameShift,10000,3,10000, 1)
exit
quit
quit()
